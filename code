{"cells":[{"cell_type":"code","source":["import numpy as np\n","import pandas as pd\n","import math\n","import random, string\n","\n","# Machine Learning libraries\n","from sklearn.ensemble import RandomForestClassifier\n","from sklearn.svm import SVC\n","from sklearn.feature_extraction.text import TfidfVectorizer\n","from sklearn.model_selection import train_test_split\n","from sklearn.metrics import classification_report\n","from sklearn.linear_model import LogisticRegression\n","import joblib\n","\n","# Deep Learning libraries\n","import tensorflow as tf\n","from tensorflow.keras.preprocessing.text import Tokenizer\n","from tensorflow.keras.preprocessing.sequence import pad_sequences\n","from tensorflow.keras import layers, models\n","from tensorflow.keras.layers import Dropout, Bidirectional\n","\n","# Set random seeds for reproducibility\n","random.seed(42)\n","np.random.seed(42)\n","tf.random.set_seed(42)\n","\n","# ------------------------------\n","# 1. Load and Clean Dataset\n","# ------------------------------\n","df = pd.read_csv('dga_domains_full.csv', header=0)\n","df.columns = ['label', 'source', 'domain']\n","df = df.drop_duplicates()\n","df['domain'] = df['domain'].str.lower()\n","df['label'] = df['label'].map({'legit': 0, 'dga': 1})\n","print(\"Dataset sample after cleaning:\")\n","print(df.head())\n","\n","# ------------------------------\n","# 2. Feature Extraction\n","# ------------------------------\n","def calculate_entropy(domain):\n","    prob = [float(domain.count(c)) / len(domain) for c in set(domain)]\n","    return -sum(p * math.log(p, 2) for p in prob)\n","\n","df[\"domain_length\"] = df[\"domain\"].apply(len)\n","df[\"entropy\"] = df[\"domain\"].apply(calculate_entropy)\n","\n","# TF-IDF features (character n-grams: 2 to 4)\n","vectorizer = TfidfVectorizer(analyzer='char', ngram_range=(2, 4))\n","tfidf_features = vectorizer.fit_transform(df[\"domain\"])\n","\n","# ------------------------------\n","# 3. Model Training (Base Models)\n","# ------------------------------\n","y = df[\"label\"]\n","\n","# --- 3.1 Random Forest (hand-crafted features) ---\n","X_handcrafted = df[[\"domain_length\", \"entropy\"]]\n","X_train_hc, X_test_hc, y_train, y_test = train_test_split(X_handcrafted, y, test_size=0.3, random_state=42)\n","rf_clf = RandomForestClassifier(n_estimators=100, random_state=42)\n","rf_clf.fit(X_train_hc, y_train)\n","y_pred_rf = rf_clf.predict(X_test_hc)\n","print(\"\\nRandom Forest Classification Report:\")\n","print(classification_report(y_test, y_pred_rf))\n","joblib.dump(rf_clf, 'rf_model.pkl')\n","\n","# --- 3.2 SVM (TF-IDF features) ---\n","X_train_tfidf, X_test_tfidf, y_train, y_test = train_test_split(tfidf_features, y, test_size=0.3, random_state=42)\n","svm_clf = SVC(kernel='linear', probability=True, random_state=42)\n","svm_clf.fit(X_train_tfidf, y_train)\n","y_pred_svm = svm_clf.predict(X_test_tfidf)\n","print(\"\\nSVM Classification Report:\")\n","print(classification_report(y_test, y_pred_svm))\n","joblib.dump(svm_clf, 'svm_model.pkl')\n","\n","# --- 3.3 Improved RNN (character-level sequences) ---\n","tokenizer = Tokenizer(char_level=True)\n","tokenizer.fit_on_texts(df[\"domain\"])\n","sequences = tokenizer.texts_to_sequences(df[\"domain\"])\n","max_length = max(len(seq) for seq in sequences)\n","padded_sequences = pad_sequences(sequences, maxlen=max_length, padding='post')\n","\n","X_train_seq, X_test_seq, y_train, y_test = train_test_split(padded_sequences, y, test_size=0.3, random_state=42)\n","vocab_size = len(tokenizer.word_index) + 1\n","embedding_dim = 32\n","\n","# Improved RNN with Bidirectional LSTM and Dropout layers\n","rnn_model = models.Sequential([\n","    layers.Embedding(input_dim=vocab_size, output_dim=embedding_dim, input_length=max_length),\n","    Bidirectional(layers.LSTM(64, return_sequences=True)),\n","    Dropout(0.5),\n","    layers.LSTM(32),\n","    Dropout(0.5),\n","    layers.Dense(32, activation='relu'),\n","    layers.Dense(1, activation='sigmoid')\n","])\n","rnn_model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n","rnn_model.summary()\n","\n","# Train for more epochs and a larger batch size\n","rnn_model.fit(X_train_seq, y_train, epochs=20, batch_size=32, validation_split=0.2, verbose=1)\n","rnn_loss, rnn_acc = rnn_model.evaluate(X_test_seq, y_test, verbose=0)\n","print(\"\\nImproved RNN Model Accuracy on Test Set: {:.2f}%\".format(rnn_acc * 100))\n","rnn_model.save('improved_rnn_model.h5')\n","\n","# ------------------------------\n","# 4. Stacking Ensemble\n","# ------------------------------\n","# Generate meta features from training set\n","rf_train_prob = rf_clf.predict_proba(X_train_hc)[:, 1]\n","svm_train_prob = svm_clf.predict_proba(X_train_tfidf)[:, 1]\n","rnn_train_prob = rnn_model.predict(X_train_seq).flatten()\n","X_meta_train = np.column_stack((rf_train_prob, svm_train_prob, rnn_train_prob))\n","\n","# Generate meta features from test set\n","rf_test_prob = rf_clf.predict_proba(X_test_hc)[:, 1]\n","svm_test_prob = svm_clf.predict_proba(X_test_tfidf)[:, 1]\n","rnn_test_prob = rnn_model.predict(X_test_seq).flatten()\n","X_meta_test = np.column_stack((rf_test_prob, svm_test_prob, rnn_test_prob))\n","\n","meta_clf = LogisticRegression(random_state=42)\n","meta_clf.fit(X_meta_train, y_train)\n","meta_test_pred = meta_clf.predict(X_meta_test)\n","print(\"\\nStacking Ensemble Logistic Regression Classification Report:\")\n","print(classification_report(y_test, meta_test_pred))\n","joblib.dump(meta_clf, 'meta_model.pkl')\n","\n","# ------------------------------\n","# 5. Real-Time Prediction Function with Stacking\n","# ------------------------------\n","def predict_domain_stacked(domain):\n","    # Random Forest: hand-crafted features\n","    length = len(domain)\n","    ent = calculate_entropy(domain)\n","    handcrafted_features = pd.DataFrame([[length, ent]], columns=['domain_length', 'entropy'])\n","    rf_prob = rf_clf.predict_proba(handcrafted_features)[:, 1][0]\n","\n","    # SVM: TF-IDF features\n","    tfidf_vec = vectorizer.transform([domain])\n","    svm_prob = svm_clf.predict_proba(tfidf_vec)[:, 1][0]\n","\n","    # Improved RNN: sequence model\n","    seq = tokenizer.texts_to_sequences([domain])\n","    padded_seq = pad_sequences(seq, maxlen=max_length, padding='post')\n","    rnn_prob = rnn_model.predict(padded_seq)[0][0]\n","\n","    # Stack probabilities and predict with meta-model\n","    X_meta = np.array([[rf_prob, svm_prob, rnn_prob]])\n","    meta_pred = meta_clf.predict(X_meta)[0]\n","    meta_prob = meta_clf.predict_proba(X_meta)[0][1]\n","\n","    return {\n","        \"Stacked_Prediction\": \"DGA-generated\" if meta_pred == 1 else \"benign\",\n","        \"Meta_Probability\": meta_prob,\n","        \"Base_Probabilities\": {\n","            \"RandomForest\": rf_prob,\n","            \"SVM\": svm_prob,\n","            \"RNN\": rnn_prob\n","        }\n","    }\n","\n","# ------------------------------\n","# 6. Testing Real-Time Stacked Predictions\n","# ------------------------------\n","test_domains = [\"example.com\", \"abcxyz123.com\", \"securebank.com\", \"lkjhgfd.com\"]\n","print(\"\\nReal-Time Stacked Domain Predictions:\")\n","for domain in test_domains:\n","    preds = predict_domain_stacked(domain)\n","    print(f\"Domain: {domain:20s} -> {preds}\")\n"],"metadata":{"id":"1DTxJ-5LrVRt","outputId":"6023b80d-f272-4a50-d08c-8617c981d89f","colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"status":"ok","timestamp":1743499831889,"user_tz":-60,"elapsed":688030,"user":{"displayName":"Juliano","userId":"10016911873839877911"}}},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Dataset sample after cleaning:\n","   label   source                            domain\n","0      1  corebot  cvyh1po636avyrsxebwbkn7.ddns.net\n","1      0    alexa                plasticbags.sa.com\n","2      0    alexa                      mzltrack.com\n","3      0    alexa                      miss-slim.ru\n","4      1  ranbyus                 txumyqrubwutbb.cc\n","\n","Random Forest Classification Report:\n","              precision    recall  f1-score   support\n","\n","           0       0.64      0.69      0.66      1533\n","           1       0.65      0.60      0.62      1467\n","\n","    accuracy                           0.64      3000\n","   macro avg       0.64      0.64      0.64      3000\n","weighted avg       0.64      0.64      0.64      3000\n","\n","\n","SVM Classification Report:\n","              precision    recall  f1-score   support\n","\n","           0       0.88      0.91      0.90      1533\n","           1       0.90      0.87      0.89      1467\n","\n","    accuracy                           0.89      3000\n","   macro avg       0.89      0.89      0.89      3000\n","weighted avg       0.89      0.89      0.89      3000\n","\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/keras/src/layers/core/embedding.py:90: UserWarning: Argument `input_length` is deprecated. Just remove it.\n","  warnings.warn(\n"]},{"output_type":"display_data","data":{"text/plain":["\u001b[1mModel: \"sequential\"\u001b[0m\n"],"text/html":["<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"sequential\"</span>\n","</pre>\n"]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┓\n","┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                        \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape               \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m        Param #\u001b[0m\u001b[1m \u001b[0m┃\n","┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━┩\n","│ embedding (\u001b[38;5;33mEmbedding\u001b[0m)                │ ?                           │     \u001b[38;5;34m0\u001b[0m (unbuilt) │\n","├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n","│ bidirectional (\u001b[38;5;33mBidirectional\u001b[0m)        │ ?                           │     \u001b[38;5;34m0\u001b[0m (unbuilt) │\n","├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n","│ dropout (\u001b[38;5;33mDropout\u001b[0m)                    │ ?                           │               \u001b[38;5;34m0\u001b[0m │\n","├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n","│ lstm_1 (\u001b[38;5;33mLSTM\u001b[0m)                        │ ?                           │     \u001b[38;5;34m0\u001b[0m (unbuilt) │\n","├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n","│ dropout_1 (\u001b[38;5;33mDropout\u001b[0m)                  │ ?                           │               \u001b[38;5;34m0\u001b[0m │\n","├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n","│ dense (\u001b[38;5;33mDense\u001b[0m)                        │ ?                           │     \u001b[38;5;34m0\u001b[0m (unbuilt) │\n","├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n","│ dense_1 (\u001b[38;5;33mDense\u001b[0m)                      │ ?                           │     \u001b[38;5;34m0\u001b[0m (unbuilt) │\n","└──────────────────────────────────────┴─────────────────────────────┴─────────────────┘\n"],"text/html":["<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┓\n","┃<span style=\"font-weight: bold\"> Layer (type)                         </span>┃<span style=\"font-weight: bold\"> Output Shape                </span>┃<span style=\"font-weight: bold\">         Param # </span>┃\n","┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━┩\n","│ embedding (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)                │ ?                           │     <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (unbuilt) │\n","├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n","│ bidirectional (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Bidirectional</span>)        │ ?                           │     <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (unbuilt) │\n","├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n","│ dropout (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)                    │ ?                           │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n","├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n","│ lstm_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">LSTM</span>)                        │ ?                           │     <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (unbuilt) │\n","├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n","│ dropout_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)                  │ ?                           │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n","├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n","│ dense (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                        │ ?                           │     <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (unbuilt) │\n","├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n","│ dense_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                      │ ?                           │     <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (unbuilt) │\n","└──────────────────────────────────────┴─────────────────────────────┴─────────────────┘\n","</pre>\n"]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["\u001b[1m Total params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n"],"text/html":["<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n","</pre>\n"]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n"],"text/html":["<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n","</pre>\n"]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n"],"text/html":["<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n","</pre>\n"]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Epoch 1/20\n","\u001b[1m175/175\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m28s\u001b[0m 122ms/step - accuracy: 0.5120 - loss: 0.6935 - val_accuracy: 0.4986 - val_loss: 0.6935\n","Epoch 2/20\n","\u001b[1m175/175\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m40s\u001b[0m 115ms/step - accuracy: 0.4928 - loss: 0.6934 - val_accuracy: 0.4986 - val_loss: 0.6932\n","Epoch 3/20\n","\u001b[1m175/175\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 121ms/step - accuracy: 0.4948 - loss: 0.6935 - val_accuracy: 0.4986 - val_loss: 0.6933\n","Epoch 4/20\n","\u001b[1m175/175\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m40s\u001b[0m 117ms/step - accuracy: 0.5086 - loss: 0.6933 - val_accuracy: 0.4986 - val_loss: 0.6937\n","Epoch 5/20\n","\u001b[1m175/175\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 110ms/step - accuracy: 0.4897 - loss: 0.6939 - val_accuracy: 0.4986 - val_loss: 0.6936\n","Epoch 6/20\n","\u001b[1m175/175\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 117ms/step - accuracy: 0.4970 - loss: 0.6935 - val_accuracy: 0.4986 - val_loss: 0.6932\n","Epoch 7/20\n","\u001b[1m175/175\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m40s\u001b[0m 111ms/step - accuracy: 0.5148 - loss: 0.6931 - val_accuracy: 0.4986 - val_loss: 0.6932\n","Epoch 8/20\n","\u001b[1m175/175\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 118ms/step - accuracy: 0.4904 - loss: 0.6935 - val_accuracy: 0.4986 - val_loss: 0.6932\n","Epoch 9/20\n","\u001b[1m175/175\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m40s\u001b[0m 111ms/step - accuracy: 0.4966 - loss: 0.6932 - val_accuracy: 0.4986 - val_loss: 0.6934\n","Epoch 10/20\n","\u001b[1m175/175\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 117ms/step - accuracy: 0.4859 - loss: 0.6936 - val_accuracy: 0.4986 - val_loss: 0.6932\n","Epoch 11/20\n","\u001b[1m175/175\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m40s\u001b[0m 111ms/step - accuracy: 0.4986 - loss: 0.6933 - val_accuracy: 0.4986 - val_loss: 0.6933\n","Epoch 12/20\n","\u001b[1m175/175\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 119ms/step - accuracy: 0.4904 - loss: 0.6935 - val_accuracy: 0.4986 - val_loss: 0.6932\n","Epoch 13/20\n","\u001b[1m175/175\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m40s\u001b[0m 111ms/step - accuracy: 0.5076 - loss: 0.6932 - val_accuracy: 0.4986 - val_loss: 0.6932\n","Epoch 14/20\n","\u001b[1m175/175\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 118ms/step - accuracy: 0.4994 - loss: 0.6935 - val_accuracy: 0.4986 - val_loss: 0.6934\n","Epoch 15/20\n","\u001b[1m175/175\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 111ms/step - accuracy: 0.5041 - loss: 0.6932 - val_accuracy: 0.4986 - val_loss: 0.6933\n","Epoch 16/20\n","\u001b[1m175/175\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 114ms/step - accuracy: 0.4804 - loss: 0.6938 - val_accuracy: 0.4986 - val_loss: 0.6932\n","Epoch 17/20\n","\u001b[1m175/175\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 118ms/step - accuracy: 0.4850 - loss: 0.6934 - val_accuracy: 0.4986 - val_loss: 0.6932\n","Epoch 18/20\n","\u001b[1m175/175\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m41s\u001b[0m 118ms/step - accuracy: 0.4933 - loss: 0.6932 - val_accuracy: 0.4986 - val_loss: 0.6933\n","Epoch 19/20\n","\u001b[1m175/175\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 116ms/step - accuracy: 0.4900 - loss: 0.6936 - val_accuracy: 0.4986 - val_loss: 0.6932\n","Epoch 20/20\n","\u001b[1m175/175\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 111ms/step - accuracy: 0.5007 - loss: 0.6931 - val_accuracy: 0.4986 - val_loss: 0.6932\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n"]},{"output_type":"stream","name":"stdout","text":["\n","Improved RNN Model Accuracy on Test Set: 51.10%\n","\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 32ms/step\n","\u001b[1m94/94\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 25ms/step\n","\n","Stacking Ensemble Logistic Regression Classification Report:\n","              precision    recall  f1-score   support\n","\n","           0       0.90      0.88      0.89      1533\n","           1       0.87      0.90      0.89      1467\n","\n","    accuracy                           0.89      3000\n","   macro avg       0.89      0.89      0.89      3000\n","weighted avg       0.89      0.89      0.89      3000\n","\n","\n","Real-Time Stacked Domain Predictions:\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 44ms/step\n","Domain: example.com          -> {'Stacked_Prediction': 'benign', 'Meta_Probability': np.float64(0.014105171523721254), 'Base_Probabilities': {'RandomForest': np.float64(0.4561216362555718), 'SVM': np.float64(0.05806066312380149), 'RNN': np.float32(0.49633968)}}\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 45ms/step\n","Domain: abcxyz123.com        -> {'Stacked_Prediction': 'benign', 'Meta_Probability': np.float64(0.03617326419935953), 'Base_Probabilities': {'RandomForest': np.float64(0.3908653478259837), 'SVM': np.float64(0.1702664525679484), 'RNN': np.float32(0.49633968)}}\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 45ms/step\n","Domain: securebank.com       -> {'Stacked_Prediction': 'benign', 'Meta_Probability': np.float64(0.009722514308835308), 'Base_Probabilities': {'RandomForest': np.float64(0.46436896782826603), 'SVM': np.float64(0.020845390112837613), 'RNN': np.float32(0.49633968)}}\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 48ms/step\n","Domain: lkjhgfd.com          -> {'Stacked_Prediction': 'DGA-generated', 'Meta_Probability': np.float64(0.9955875226548739), 'Base_Probabilities': {'RandomForest': np.float64(0.2992072579677496), 'SVM': np.float64(0.992439104053631), 'RNN': np.float32(0.49633968)}}\n"]}]}],"metadata":{"colab":{"provenance":[{"file_id":"/v2/external/notebooks/intro.ipynb","timestamp":1742819009061}]},"kernelspec":{"display_name":"Python 3","name":"python3"}},"nbformat":4,"nbformat_minor":0}